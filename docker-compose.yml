services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: mlops-trustpilot:latest   # <— nom unique commun
    container_name: mlops_trustpilot_api
    ports: ["8000:8000"]
    environment:
      LABEL_MODEL_PATH: "models/random_forest/model.joblib"
      SCORE_MODEL_PATH: "models/linear_regression/model.joblib"
      SECRET_KEY: ${SECRET_KEY:-dev-secret}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./models:/app/models:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys,json; r=urllib.request.urlopen('http://127.0.0.1:8000/health/ready', timeout=2); sys.exit(0 if json.loads(r.read().decode()).get('status')=='ready' else 1)"]
      interval: 20s
      timeout: 4s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  preprocess:
    image: mlops-trustpilot:latest   # <— réutilise l'image déjà buildée
    container_name: mlops_trustpilot_preprocess
    command: python -m src.data.preprocess
    environment:
      RAW_CSV: "data/raw/raw_data.csv"
      PROC_CSV: "data/processed/processed_data.csv"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    restart: "no"
    profiles: ["jobs"]

  train:
    image: mlops-trustpilot:latest
    container_name: mlops_trustpilot_train
    command: python -m src.models.train_model
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    restart: "no"
    profiles: ["jobs"]

  airflow_postgres:
    image: postgres:15
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
      - ./db/users.sql:/docker-entrypoint-initdb.d/users.sql:ro
    restart: unless-stopped

  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      #AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_postgres:5432/airflow
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_postgres:5432/airflow

      PYTHONPATH: /opt/airflow/src
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
      - ./airflow/airflow.sh:/opt/airflow/airflow.sh
      - ./data:/opt/airflow/data
      - ./models:/opt/airflow/models
      
    ports:
      - "8080:8080"
    depends_on:
      - airflow_postgres
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json 
    depends_on:
      - airflow_postgres
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - api
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  airflow_postgres_data:
  grafana_data:
  pgadmin_data:
  prometheus_data:
